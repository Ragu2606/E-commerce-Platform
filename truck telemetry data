import boto3
import random
import json
from datetime import datetime

def generate_truck_data():
    truck_data_list = []
    for _ in range(3):
        truck_id = f"truck_{random.randint(1, 3)}"
        timestamp = datetime.utcnow().isoformat()
        gps_location = {
            "latitude": random.uniform(-90, 90),
            "longitude": random.uniform(-180, 180),
            "altitude": random.uniform(0, 10000),
            "speed": round(random.uniform(0, 120))
        }
        vehicle_speed = round(random.uniform(0, 120))
        engine_diagnostics = {
            "engine_rpm": round(random.uniform(500, 3000)),
            "fuel_level": round(random.uniform(0, 100),2),
            "temperature": round(random.uniform(-40, 125),2),
            "oil_pressure": round(random.uniform(20, 80),2),
            "battery_voltage": round(random.uniform(11, 15),2)
        }
        odometer_reading = round(random.uniform(0, 100000))
        fuel_consumption = round(random.uniform(0, 50),2)
        vehicle_health_and_maintenance = {
            "brake_status": random.choice(["Good", "Average", "Poor"]),
            "tire_pressure": {
                "front_left": round(random.uniform(30, 35),2),
                "front_right": round(random.uniform(30, 35),2),
                "rear_left": round(random.uniform(30, 35),2),
                "rear_right": round(random.uniform(30, 35),2)
            },
            "transmission_status": random.choice(["Good", "Average", "Poor"])
        }
        environmental_conditions = {
            "temperature": round(random.uniform(-40, 50),2),
            "humidity": round(random.uniform(0, 100),2),
            "atmospheric_pressure": round(random.uniform(950, 1050),2)
        }

        truck_data = {
            "truck_id": truck_id,
            "timestamp": timestamp,
            "gps_location": gps_location,
            "vehicle_speed": vehicle_speed,
            "engine_diagnostics": engine_diagnostics,
            "odometer_reading": odometer_reading,
            "fuel_consumption": fuel_consumption,
            "vehicle_health_and_maintenance": vehicle_health_and_maintenance,
            "environmental_conditions": environmental_conditions
        }
        truck_data_list.append(truck_data)
    return truck_data_list

def lambda_handler(event, context):
    truck_data_list = generate_truck_data()
    api_gateway_response = {
        "statusCode": 200,
        "body": json.dumps(truck_data_list)
    }
    return api_gateway_response
